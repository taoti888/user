// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: permissions.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Permissions_CreatePermissions_FullMethodName        = "/proto.Permissions/CreatePermissions"
	Permissions_GetPermissions_FullMethodName           = "/proto.Permissions/GetPermissions"
	Permissions_UpdatePermissions_FullMethodName        = "/proto.Permissions/UpdatePermissions"
	Permissions_DeletePermissions_FullMethodName        = "/proto.Permissions/DeletePermissions"
	Permissions_AddResourceToPermissions_FullMethodName = "/proto.Permissions/AddResourceToPermissions"
)

// PermissionsClient is the client API for Permissions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionsClient interface {
	CreatePermissions(ctx context.Context, in *CreatePermissionsRequest, opts ...grpc.CallOption) (*PermissionsInfoResponse, error)
	GetPermissions(ctx context.Context, in *GetPermissionsRequest, opts ...grpc.CallOption) (*PermissionsInfoResponse, error)
	UpdatePermissions(ctx context.Context, in *UpdatePermissionsRequest, opts ...grpc.CallOption) (*PermissionsInfoResponse, error)
	DeletePermissions(ctx context.Context, in *DeletePermissionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddResourceToPermissions(ctx context.Context, in *AddResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type permissionsClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionsClient(cc grpc.ClientConnInterface) PermissionsClient {
	return &permissionsClient{cc}
}

func (c *permissionsClient) CreatePermissions(ctx context.Context, in *CreatePermissionsRequest, opts ...grpc.CallOption) (*PermissionsInfoResponse, error) {
	out := new(PermissionsInfoResponse)
	err := c.cc.Invoke(ctx, Permissions_CreatePermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) GetPermissions(ctx context.Context, in *GetPermissionsRequest, opts ...grpc.CallOption) (*PermissionsInfoResponse, error) {
	out := new(PermissionsInfoResponse)
	err := c.cc.Invoke(ctx, Permissions_GetPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) UpdatePermissions(ctx context.Context, in *UpdatePermissionsRequest, opts ...grpc.CallOption) (*PermissionsInfoResponse, error) {
	out := new(PermissionsInfoResponse)
	err := c.cc.Invoke(ctx, Permissions_UpdatePermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) DeletePermissions(ctx context.Context, in *DeletePermissionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Permissions_DeletePermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) AddResourceToPermissions(ctx context.Context, in *AddResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Permissions_AddResourceToPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionsServer is the server API for Permissions service.
// All implementations must embed UnimplementedPermissionsServer
// for forward compatibility
type PermissionsServer interface {
	CreatePermissions(context.Context, *CreatePermissionsRequest) (*PermissionsInfoResponse, error)
	GetPermissions(context.Context, *GetPermissionsRequest) (*PermissionsInfoResponse, error)
	UpdatePermissions(context.Context, *UpdatePermissionsRequest) (*PermissionsInfoResponse, error)
	DeletePermissions(context.Context, *DeletePermissionsRequest) (*emptypb.Empty, error)
	AddResourceToPermissions(context.Context, *AddResourceRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPermissionsServer()
}

// UnimplementedPermissionsServer must be embedded to have forward compatible implementations.
type UnimplementedPermissionsServer struct {
}

func (UnimplementedPermissionsServer) CreatePermissions(context.Context, *CreatePermissionsRequest) (*PermissionsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermissions not implemented")
}
func (UnimplementedPermissionsServer) GetPermissions(context.Context, *GetPermissionsRequest) (*PermissionsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (UnimplementedPermissionsServer) UpdatePermissions(context.Context, *UpdatePermissionsRequest) (*PermissionsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermissions not implemented")
}
func (UnimplementedPermissionsServer) DeletePermissions(context.Context, *DeletePermissionsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermissions not implemented")
}
func (UnimplementedPermissionsServer) AddResourceToPermissions(context.Context, *AddResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResourceToPermissions not implemented")
}
func (UnimplementedPermissionsServer) mustEmbedUnimplementedPermissionsServer() {}

// UnsafePermissionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionsServer will
// result in compilation errors.
type UnsafePermissionsServer interface {
	mustEmbedUnimplementedPermissionsServer()
}

func RegisterPermissionsServer(s grpc.ServiceRegistrar, srv PermissionsServer) {
	s.RegisterService(&Permissions_ServiceDesc, srv)
}

func _Permissions_CreatePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsServer).CreatePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permissions_CreatePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsServer).CreatePermissions(ctx, req.(*CreatePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permissions_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permissions_GetPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsServer).GetPermissions(ctx, req.(*GetPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permissions_UpdatePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsServer).UpdatePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permissions_UpdatePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsServer).UpdatePermissions(ctx, req.(*UpdatePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permissions_DeletePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsServer).DeletePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permissions_DeletePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsServer).DeletePermissions(ctx, req.(*DeletePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permissions_AddResourceToPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsServer).AddResourceToPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permissions_AddResourceToPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsServer).AddResourceToPermissions(ctx, req.(*AddResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Permissions_ServiceDesc is the grpc.ServiceDesc for Permissions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Permissions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Permissions",
	HandlerType: (*PermissionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePermissions",
			Handler:    _Permissions_CreatePermissions_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _Permissions_GetPermissions_Handler,
		},
		{
			MethodName: "UpdatePermissions",
			Handler:    _Permissions_UpdatePermissions_Handler,
		},
		{
			MethodName: "DeletePermissions",
			Handler:    _Permissions_DeletePermissions_Handler,
		},
		{
			MethodName: "AddResourceToPermissions",
			Handler:    _Permissions_AddResourceToPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "permissions.proto",
}
